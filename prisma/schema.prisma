// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
enum Role {
  Organizer
  Attendee
}

enum Status {
  available
  active
  expiered
  hold
  soldout
}

enum Category {
  Music
  Sports
  Education
  Business
  Arts
  Food_Drink
  Festivals
  Nightlife
  Family
  Spiritual
}

model User {
  id            String          @id @default(uuid())
  email         String?         @unique
  phoneNumber   String          @unique
  passwordHash  String
  name          String
  role          Role            @default(Attendee)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  organizedEvents Event[]       @relation("UserOrganizedEvents")
  purchases       Purchase[]    @relation("UserPurchases")
  sales           Purchase[]    @relation("OrganizerSales")
  refreshTokens   RefreshTocken[]
}

// Event model
model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  poster      String?
  category    Category
  status      Status   @default(active)
  
  // Organizer relation
  organizer   User     @relation("UserOrganizedEvents", fields: [organizerId], references: [id])
  organizerId String

  tickets     Ticket[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Ticket model
model Ticket {
  id          String        @id @default(uuid())
  type        String        @default("General")
  price       Float
  quantity    Int
  sold        Int           @default(0)
  status      Status        @default(available)
  
  event       Event         @relation(fields: [eventId], references: [id])
  eventId     String

  TicketCycle TicketCycle[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RefreshTocken {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  token  String
  expiry DateTime
}

model Purchase {
  id             String   @id @default(uuid())
  
  // Buyer
  user           User     @relation("UserPurchases", fields: [user_id], references: [id])
  user_id        String

  // Organizer (seller/receiver)
  organizer      User     @relation("OrganizerSales", fields: [organizer_id], references: [id])
  organizer_id   String

  // Payment details
  tx_ref         String   @unique
  chapa_tx_id    String?
  amount         Float
  currency       String   @default("ETB")
  status         String   @default("pending") // pending, success, failed
  payment_method String?
  raw_response   Json?

  // Chapa payout account
  subaccountId   String? 

  // Relations
  cycles         TicketCycle[]

  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

// TicketCycle (ticket instance tied to a purchase)
model TicketCycle {
  id          String    @id @default(uuid())
  
  purchase    Purchase  @relation(fields: [purchase_id], references: [id])
  purchase_id String

  ticket      Ticket    @relation(fields: [ticket_id], references: [id])
  ticket_id   String

  is_used     Boolean   @default(false)
  used_at     DateTime?
  is_expired  Boolean   @default(false)
}
